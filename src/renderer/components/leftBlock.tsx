// ! ###  - Left Block Components - ###
// *
// *  The left block components handle the 
// * changes/staging area and the commit box.

// ---------------------
// --- React Imports ---
// ---------------------

import * as React from 'react';

// --------------------------
// --- Components Imports ---
// --------------------------

import {
    SpinnerComponent
} from "./misc"

import {
    CommitButton,
    CommitMessageInput,
    CommmitDescription
} from "./leftBlock/commitBox"

import {
    ChangesListElement,
    GlobalStagingCheckboxElement
} from "./leftBlock/stagingArea"

// ------------------------
// --- Function Imports ---
// ------------------------

import {
    parseStatus
} from "../functions"

// -----------------------
// --- Actions Imports ---
// -----------------------

import {
    UpdateChangesAreaAction
} from "../actions/commonActions.redux.action"

// --------------------
// --- Type Imports ---
// --------------------

import { useSelector } from "../types/redefinitions"

// ----------------------
// --- Static Imports ---
// ----------------------

require('../static/scss/leftBlock.scss');

// ----------------------------
// --- Localization Imports ---
// ----------------------------

import { readConfigSync } from "../functions/config"

const getLanguage = () => { 

    // ? We do this instead of reading from state because a 
    // ? timeout or async function would get race conditions and break the components
    const configData = readConfigSync()

    let configObject

    if (configData) {
        configObject = JSON.parse(configData)
    }
    return configObject.UIConfig.language
}

const localization = require(`../lang/${getLanguage()}`)

// ---------------------
// --- Store Imports ---
// ---------------------

import { store } from "../store/index.redux.store"

// ------------------------------
// --- Action Creator Imports ---
// ------------------------------

import { SetContextMenuIdAction } from "../actions/commonActions.redux.action"

// -------------------------------
// --- Hierarchical Components ---
// -------------------------------

export const LeftBlock: React.FC = () => {
    // -- Simple container that handles the left block of the screen.
    return (
        <div>
            <ChangesSpace key={"ID_CHANGES_SPACE"}/>
            <CommitBox />
        </div>
    );
};

// -------------------------
// --- Commit Components ---
// -------------------------

export const CommitBox: React.FC = () => {
    // -- Component that contains the commit box elements

    // TODO Create button for the auto-branching workflow and the manual workflow

    // TODO Swap CommitButton for the correct one given the workflow context

    return (
        <div className={"commit-overlay"}>
            <SpinnerComponent name={"commit-box"} message={localization.commitProcessMessage}/>
            <div className={'commit-box'}>
                <p>{localization.commitBoxTitle}</p>
                <div className={"commit-message-wrapper"}>
                    <CommitMessageInput />
                    <CommitButton />
                </div>
                <p className={"commit-description-descriptor-name"}>{localization.commitBoxDescriptionName}</p>
                <p className={"commit-description-descriptor"}>{
                    localization.commitBoxDescriptionWhat
                } | {
                    localization.commitBoxDescriptionWhy
                }</p>
                <CommmitDescription />
            </div>
        </div>
    );
};

// -------------------------------
// --- Changes Area Components ---
// -------------------------------


const ChangesSpace: React.FC = () => {
    // -- Component that creates the list of elements based on the tree generated by
    // the reducer updateChangesAreaReducer.

    const currentData = useSelector(state => state.viewModifiedFilesReducer.parsedData)
    const changesTree = useSelector(state => state.updateChangesAreaReducer.changesAreaTree)
    const oldData = window.localStorage.getItem("currentViewTreeData")
    
    if (
        oldData &&
        JSON.stringify(currentData._v) !== undefined &&
        oldData !== JSON.stringify(currentData._v)
    ) {
        store.dispatch(UpdateChangesAreaAction(currentData))
        window.localStorage.setItem("currentViewTreeData", JSON.stringify(currentData._v))
    }

    if ( changesTree === [] ) {
        Promise.resolve(parseStatus()).then((result) => {
            const wrappedResult = {
                _v: result
            }
    
            store.dispatch(UpdateChangesAreaAction(wrappedResult))
        })
    }

    if (!oldData) {
        window.localStorage.setItem("currentViewTreeData", JSON.stringify(currentData._v))
    }
    
    const changeContextMenuStagingArea = () => {
        store.dispatch(SetContextMenuIdAction("stagingAreaContextMenu"))
    }

    const restoreContextMenu = () => {
        store.dispatch(SetContextMenuIdAction("defaultContextMenu"))
    }

    const changesAreaTree = useSelector(state => state.updateChangesAreaReducer.changesAreaTree)
    const elements = []
    let title
    for (let i = 0; i < changesAreaTree.length ; i += 1) {
        // -- Creates the <ChangesListElement /> elements required.
        elements.push(
            React.createElement(ChangesListElement,{
                status: changesAreaTree[i].status,
                content: changesAreaTree[i].content,
                displayContent: changesAreaTree[i].displayContent,
                staged: changesAreaTree[i].staged,
                key: `ID_STAGING_AREA_ELEMENT_${i}`,
                index: i
            })
        )
    }
    // -- The title changes based on the presence of elements in the tree.
    if (changesAreaTree.length === 0 ){
        title =  React.createElement('p', { className: "changes-list-title"}, localization.changesAreaNoChangesTitle)
    }
    else {
        title = [
            <GlobalStagingCheckboxElement key={"ID_GLOBAL_STAGING_CHECKBOX"}/>,
            React.createElement(
                'p', 
                {
                    key: "ID_CHANGES_LIST_TITLE",
                    className: "changes-list-title"
                }, 
                `${changesAreaTree.length} ${localization.changesAreaChangesTitle}`
            )
        ]
    }

    // -- Creates the <ul> element that contains the staging area element list.
    const changesList = React.createElement('ul', {
        className: "changes-list",
        onMouseEnter: changeContextMenuStagingArea,
        onMouseLeave: restoreContextMenu
    }, elements)
    return (
        <div
            id={"ID_STAGING_AREA"}
            className={'changes-area'}
        >
            {title}
            {changesList}
        </div>
    );
};

// --------------------------
// --- Utility Components ---
// --------------------------

export const HideButtonLeft: React.FC = () => {

    // TODO Make everything else recognize that the left bar is collapsed and resize accordingly

    const handleHiding = () => {
        const leftBlock = document.querySelector(".left-block") as HTMLDivElement
        const hideSidebarButton = document.querySelector(".hide-sidebar-left-button") as HTMLDivElement
        const mainBlock = document.querySelector(".main-block") as HTMLDivElement

        const originalLeftBlockWidth = 287

        const currentClassList = leftBlock.classList

        if (currentClassList.contains("sidebar-hidden")) {
            const currentClassList = leftBlock.classList

            currentClassList.remove("sidebar-hidden")
            currentClassList.add("sidebar-visible")

            leftBlock.className = String(currentClassList)

            hideSidebarButton.style.left = `${originalLeftBlockWidth}px`

            mainBlock.style.left = `${originalLeftBlockWidth}px`
            // TODO make the width read if right sidebar is collapsed and adjust accordingly
            mainBlock.style.width = `calc(100vw - 293px - 250px)`

            return
        }

        currentClassList.remove("sidebar-visible")
        currentClassList.add("sidebar-hidden")

        mainBlock.style.left = `0px`
        mainBlock.style.width = `calc(100vw - 293px - 250px + ${originalLeftBlockWidth}px)`

        leftBlock.className = String(currentClassList)

        // FIXME this is 5px because when windowed the resize gobbles up all the space. it should be different values given if maximized or not
        hideSidebarButton.style.left = "5px"

        return
    }

    const handleHoverIn = () => {
        const leftBlockHideSidebarButton = document.querySelector(".hide-sidebar-left-button") as HTMLDivElement

        if (leftBlockHideSidebarButton.style.left ==="5px") {
            leftBlockHideSidebarButton.textContent =" >"
            return
        }

        leftBlockHideSidebarButton.textContent = "<"
        return
    }

    const handleHoverOut = () => {
        const leftBlockHideSidebarButton = document.querySelector(".hide-sidebar-left-button") as HTMLDivElement

        leftBlockHideSidebarButton.textContent = ""
        return
    }

    return (
        <div
            className={"hide-sidebar-left-button"}
            onClick={handleHiding}
            onMouseEnter={handleHoverIn}
            onMouseLeave={handleHoverOut}
        />
    )
}